/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardMyPrescriptionsRouteImport } from './routes/dashboard/my-prescriptions'
import { Route as DashboardMyCalendarRouteImport } from './routes/dashboard/my-calendar'
import { Route as DashboardHomeRouteImport } from './routes/dashboard/home'
import { Route as DashboardAppointmentsRouteImport } from './routes/dashboard/appointments'
import { Route as authAuthSignupRouteImport } from './routes/(auth)/auth-signup'
import { Route as authAuthSigninRouteImport } from './routes/(auth)/auth-signin'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardMyPrescriptionsRoute =
  DashboardMyPrescriptionsRouteImport.update({
    id: '/my-prescriptions',
    path: '/my-prescriptions',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardMyCalendarRoute = DashboardMyCalendarRouteImport.update({
  id: '/my-calendar',
  path: '/my-calendar',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardHomeRoute = DashboardHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAppointmentsRoute = DashboardAppointmentsRouteImport.update({
  id: '/appointments',
  path: '/appointments',
  getParentRoute: () => DashboardRoute,
} as any)
const authAuthSignupRoute = authAuthSignupRouteImport.update({
  id: '/(auth)/auth-signup',
  path: '/auth-signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authAuthSigninRoute = authAuthSigninRouteImport.update({
  id: '/(auth)/auth-signin',
  path: '/auth-signin',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth-signin': typeof authAuthSigninRoute
  '/auth-signup': typeof authAuthSignupRoute
  '/dashboard/appointments': typeof DashboardAppointmentsRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/my-calendar': typeof DashboardMyCalendarRoute
  '/dashboard/my-prescriptions': typeof DashboardMyPrescriptionsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth-signin': typeof authAuthSigninRoute
  '/auth-signup': typeof authAuthSignupRoute
  '/dashboard/appointments': typeof DashboardAppointmentsRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/my-calendar': typeof DashboardMyCalendarRoute
  '/dashboard/my-prescriptions': typeof DashboardMyPrescriptionsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/(auth)/auth-signin': typeof authAuthSigninRoute
  '/(auth)/auth-signup': typeof authAuthSignupRoute
  '/dashboard/appointments': typeof DashboardAppointmentsRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/my-calendar': typeof DashboardMyCalendarRoute
  '/dashboard/my-prescriptions': typeof DashboardMyPrescriptionsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/auth-signin'
    | '/auth-signup'
    | '/dashboard/appointments'
    | '/dashboard/home'
    | '/dashboard/my-calendar'
    | '/dashboard/my-prescriptions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/auth-signin'
    | '/auth-signup'
    | '/dashboard/appointments'
    | '/dashboard/home'
    | '/dashboard/my-calendar'
    | '/dashboard/my-prescriptions'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/(auth)/auth-signin'
    | '/(auth)/auth-signup'
    | '/dashboard/appointments'
    | '/dashboard/home'
    | '/dashboard/my-calendar'
    | '/dashboard/my-prescriptions'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  authAuthSigninRoute: typeof authAuthSigninRoute
  authAuthSignupRoute: typeof authAuthSignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/my-prescriptions': {
      id: '/dashboard/my-prescriptions'
      path: '/my-prescriptions'
      fullPath: '/dashboard/my-prescriptions'
      preLoaderRoute: typeof DashboardMyPrescriptionsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/my-calendar': {
      id: '/dashboard/my-calendar'
      path: '/my-calendar'
      fullPath: '/dashboard/my-calendar'
      preLoaderRoute: typeof DashboardMyCalendarRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/home': {
      id: '/dashboard/home'
      path: '/home'
      fullPath: '/dashboard/home'
      preLoaderRoute: typeof DashboardHomeRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/appointments': {
      id: '/dashboard/appointments'
      path: '/appointments'
      fullPath: '/dashboard/appointments'
      preLoaderRoute: typeof DashboardAppointmentsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/(auth)/auth-signup': {
      id: '/(auth)/auth-signup'
      path: '/auth-signup'
      fullPath: '/auth-signup'
      preLoaderRoute: typeof authAuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/auth-signin': {
      id: '/(auth)/auth-signin'
      path: '/auth-signin'
      fullPath: '/auth-signin'
      preLoaderRoute: typeof authAuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardAppointmentsRoute: typeof DashboardAppointmentsRoute
  DashboardHomeRoute: typeof DashboardHomeRoute
  DashboardMyCalendarRoute: typeof DashboardMyCalendarRoute
  DashboardMyPrescriptionsRoute: typeof DashboardMyPrescriptionsRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAppointmentsRoute: DashboardAppointmentsRoute,
  DashboardHomeRoute: DashboardHomeRoute,
  DashboardMyCalendarRoute: DashboardMyCalendarRoute,
  DashboardMyPrescriptionsRoute: DashboardMyPrescriptionsRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  authAuthSigninRoute: authAuthSigninRoute,
  authAuthSignupRoute: authAuthSignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
